# Distributed under the MIT License.
# See LICENSE.txt for details.

# Continuous integration tests that pull requests are required to pass
name: Tests

# Note that by default the jobs only run on the base repository, testing pull
# requests and merge commits. Enable GitHub Actions in your fork's repository
# settings to also run the tests on every push to one of your branches.
on:
  # We run all jobs when pull requests are opened, commits are pushed, or pull
  # requests are re-opened after being closed.
  # The jobs triggered by this event run on the base repository of the pull
  # request, so they have access to its caches.
  pull_request:
  # We run those jobs that require no information about a pull request (e.g.
  # unit tests) also on `push` events. This setup tests merge commits into
  # `develop` and also builds up caches on `develop` that can be re-used by PRs.
  # It also runs the jobs on forks if they have GitHub Actions enabled.
  push:
    branches-ignore:
      - gh-pages

jobs:
  # Make sure no commits are prefixed with `fixup` or similar keywords. See
  # `tools/CheckCommits.sh` for details.
  check_commits:
    name: Commits
    # Only run on pull requests since we don't check _all_ commits, but only
    # those that came after the PR's base ref.
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check commits
        # `CheckCommits.sh` tests against the local `develop` branch, so that's
        # where we fetch the pull-request's base-branch to. Typically, it is
        # the upstream `sxs-collaboration/spectre/develop` branch.
        run: >
          cd $GITHUB_WORKSPACE

          git remote add upstream
          https://github.com/${{ github.repository }}.git

          git remote -v

          git fetch upstream ${{ github.base_ref }}:develop

          ./tools/CheckCommits.sh

  # - Run simple textual checks over files in the repository, e.g. checking for
  #   a license, line length limits etc. See `tools/CheckFiles.sh` for details.
  # - Run format checker for python to make sure the code is formatted correctly
  check_files_and_formatting:
    name: File and formatting checks
    runs-on: ubuntu-latest
    container:
      image: sxscollaboration/spectrebuildenv:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check python formatting
        run: |
          cd $GITHUB_WORKSPACE
          ./tools/CheckPythonFormatting.sh
      - name: Test script
        run: |
          cd $GITHUB_WORKSPACE
          ./tools/CheckFiles.sh --test
      - name: Check files
        run: |
          cd $GITHUB_WORKSPACE
          ./tools/CheckFiles.sh

  # Lint the code that changed in a pull request with clang-tidy.
  clang_tidy:
    name: Clang-tidy
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container:
      image: sxscollaboration/spectrebuildenv:latest
    strategy:
      matrix:
        build_type: [Debug, Release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch upstream/develop
        # We only want to check files that have changed in this pull request,
        # so we fetch its base branch and pass it to `clang-tidy-hash`.
        # Typically, it is the `sxs-collaboration/spectre/develop` branch.
        run: >
          cd $GITHUB_WORKSPACE

          git remote add upstream
          https://github.com/${{ github.repository }}.git

          git remote -v

          git fetch upstream ${{ github.base_ref }}
      - name: Configure with cmake
        working-directory: /work
        run: >
          mkdir build && cd build

          cmake
          -D CMAKE_C_COMPILER=clang
          -D CMAKE_CXX_COMPILER=clang++
          -D CMAKE_Fortran_COMPILER=gfortran-8
          -D CHARM_ROOT=/work/charm/multicore-linux64-clang
          -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -D OVERRIDE_ARCH=x86-64
          -D USE_CCACHE=OFF
          -D DEBUG_SYMBOLS=OFF
          -D BUILD_PYTHON_BINDINGS=ON
          $GITHUB_WORKSPACE
      - name: Check clang-tidy
        working-directory: /work/build
        run: |
          make clang-tidy-hash HASH=upstream/${{ github.base_ref }}

  # Build the documentation and check for problems, then upload as a workflow
  # artifact.
  doc_check:
    name: Documentation
    runs-on: ubuntu-latest
    container:
      image: sxscollaboration/spectrebuildenv:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Configure with cmake
        working-directory: /work
        run: >
          mkdir build && cd build

          cmake
          -D CMAKE_C_COMPILER=clang
          -D CMAKE_CXX_COMPILER=clang++
          -D CMAKE_Fortran_COMPILER=gfortran-8
          -D CHARM_ROOT=/work/charm/multicore-linux64-clang
          -D CMAKE_BUILD_TYPE=Debug
          -D DEBUG_SYMBOLS=OFF
          -D BUILD_PYTHON_BINDINGS=ON
          $GITHUB_WORKSPACE
      - name: Check documentation
        working-directory: /work/build
        run: |
          make doc-check
      # Re-build with coverage information on pushes to develop for deployment
      # to gh-pages.
      - name: Build documentation with coverage
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        working-directory: /work/build
        run: |
          make doc-coverage
      # The `upload-artifact` action doesn't run in the container, so we move
      # the data to the shared workspace.
      # Relevant issue: https://github.com/actions/upload-artifact/issues/13
      - name: Prepare for upload
        run: |
          mv /work/build/docs/html $GITHUB_WORKSPACE/docs-html
      - name: Upload documentation
        uses: actions/upload-artifact@v1
        with:
          name: docs-html
          # The `path` is relative to the $GITHUB_WORKSPACE on the host machine
          path: docs-html

  # Deploy built documentation to `gh-pages` on pushes to `develop`.
  doc_deploy:
    name: Deploy documentation
    needs: doc_check
    # Enabling documentation deployment only on pushes to
    # sxs-collaboration/spectre for now, since the action requires a personal
    # access token until the issue linked below is resolved. Once the action
    # can use the standard `GITHUB_TOKEN` we can enable this job also on forks.
    if: >-
      github.event_name == 'push'
      && github.ref == 'refs/heads/develop'
      && github.repository == 'sxs-collaboration/spectre'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download built documentation
        uses: actions/download-artifact@v1
        with:
          name: docs-html
      - name: Add custom domain
        if: github.repository == 'sxs-collaboration/spectre'
        working-directory: ./docs-html
        run: |
          echo "spectre-code.org" > CNAME
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v2
        env:
          # There's an issue with using the `GITHUB_TOKEN` for gh-pages
          # deployment as of Jan 8, 2020, so we use a personal access token
          # instead until the issue is resolved. See:
          # https://github.community/t5/GitHub-Actions/Github-action-not-triggering-gh-pages-upon-push/td-p/26869
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERSONAL_TOKEN: ${{ secrets.GH_PAGES_DEPLOY_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: docs-html
        with:
          forceOrphan: true

  # Build all test executables and run unit tests on a variety of compiler
  # configurations.
  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc-6, gcc-7, gcc-8, gcc-9, clang-4.0, clang-5.0,
          clang-8, clang-9]
        build_type: [Debug, Release]
        use_pch: [OFF, ON]

        # Perform a single build with the PCH off to make sure we can
        # properly configure and build the core libraries when the
        # PCH is disabled. Building all the tests without the PCH takes
        # very long and the most we would catch is a missing include of
        # something that's in the PCH.
        #
        # GitHub currently doesn't allow us specifying a list of compilers
        # or wildcards (e.g. gcc-* means literally gcc-* not gcc-ANYTHING).
        # We also cannot exclude all the pch:OFF builds and then later
        # include only one (GitHub applies exclude more aggressively than
        # include rather than going by ordering).
        exclude:
          - use_pch: OFF
            build_type: Release
          - use_pch: OFF
            build_type: Debug
            compiler: gcc-6
          - use_pch: OFF
            build_type: Debug
            compiler: gcc-7
          - use_pch: OFF
            build_type: Debug
            compiler: gcc-8
          - use_pch: OFF
            build_type: Debug
            compiler: gcc-9
          - use_pch: OFF
            build_type: Debug
            compiler: clang-4.0
          - use_pch: OFF
            build_type: Debug
            compiler: clang-5.0
          - use_pch: OFF
            build_type: Debug
            compiler: clang-8
        include:
          # Prevent random failures of Debug builds.
          # See issue https://github.com/sxs-collaboration/spectre/issues/1807
          - build_type: Debug
            EXTRA_CXX_FLAGS: "-DBLAZE_USE_VECTORIZATION=0"
          - compiler: clang-8
            build_type: Debug
            # When building with ASAN we also need python bindings to be
            # disabled because otherwise we get link errors. See issue:
            # https://github.com/sxs-collaboration/spectre/issues/1890
            # So we are also using this build to test building without Python
            # bindings enabled.
            ASAN: ON
            BUILD_PYTHON_BINDINGS: OFF
          # Test with Python 2 so that we retain backwards compatibility. We
          # keep track of Python versions on supercomputers in this issue:
          # https://github.com/sxs-collaboration/spectre/issues/442
          - compiler: gcc-8
            build_type: Debug
            PYTHON_EXECUTABLE: /usr/bin/python2

    container:
      image: sxscollaboration/spectrebuildenv:latest
      env:
        # We run unit tests with the following compiler flags:
        # - `-Werror`: Treat warnings as error.
        # - `-march=x86-64`: Make sure we are building on a consistent
        #   architecture so caching works. This is necessary because GitHub
        #   may run the job on different hardware.
        CXXFLAGS: "-Werror"
        # We make sure to use a fixed absolute path for the ccache directory
        CCACHE_DIR: /work/ccache
        # GitHub Actions currently limits the size of individual caches
        # to 400 MB.
        CCACHE_MAXSIZE: 400M
        CCACHE_COMPRESS: 1
        CCACHE_COMPRESSLEVEL: 6
        # We hash the content of the compiler rather than the location and mtime
        # to make sure the cache works across the different machines
        CCACHE_COMPILERCHECK: content
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Restore ccache
        uses: actions/cache@v1
        with:
          path: /work/ccache
          key:
            "ccache-${{ matrix.compiler }}-${{ matrix.build_type }}-pch-${{
            matrix.use_pch }}"
      - name: Configure ccache
        # Print the ccache configuration and reset statistics
        run: |
          ccache -pz
      - name: Configure build with cmake
        working-directory: /work
        # Notes on the build configuration:
        # - We don't need debug symbols during CI, so we turn them off to reduce
        #   memory usage.
        run: >
          mkdir build && cd build

          if [[ ${{ matrix.compiler }} =~ (gcc|clang)-([0-9\.]+) ]]; then
            CC=${BASH_REMATCH[1]}-${BASH_REMATCH[2]};
            CHARM_CC=${BASH_REMATCH[1]};
            if [[ ${BASH_REMATCH[1]} = gcc ]]; then
              CXX=g++-${BASH_REMATCH[2]};
              FC=gfortran-${BASH_REMATCH[2]};
            else
              CXX=clang++-${BASH_REMATCH[2]};
              FC=gfortran-8;
            fi
          fi

          BUILD_PYTHON_BINDINGS=${{ matrix.BUILD_PYTHON_BINDINGS }}
          PYTHON_EXECUTABLE=${{ matrix.PYTHON_EXECUTABLE }}
          ASAN=${{ matrix.ASAN }}
          UBSAN_UNDEFINED=${{ matrix.UBSAN_UNDEFINED }}
          UBSAN_INTEGER=${{ matrix.UBSAN_INTEGER }}
          USE_PCH=${{ matrix.use_pch }}

          cmake
          -D CMAKE_C_COMPILER=${CC}
          -D CMAKE_CXX_COMPILER=${CXX}
          -D CMAKE_Fortran_COMPILER=${FC}
          -D CMAKE_CXX_FLAGS="${CXXFLAGS} ${{ matrix.EXTRA_CXX_FLAGS }}"
          -D OVERRIDE_ARCH=x86-64
          -D CHARM_ROOT=/work/charm/multicore-linux64-${CHARM_CC}
          -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -D DEBUG_SYMBOLS=OFF
          -D RUN_TESTS_IN_TEST_EXECUTABLES=OFF
          -D STRIP_SYMBOLS=ON
          -D STUB_EXECUTABLE_OBJECT_FILES=ON
          -D STUB_LIBRARY_OBJECT_FILES=ON
          -D USE_PCH=${USE_PCH}
          -D USE_CCACHE=ON
          -D BUILD_PYTHON_BINDINGS=${BUILD_PYTHON_BINDINGS:-'ON'}
          -D PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE:-'/usr/bin/python3'}
          -D ASAN=${ASAN:-'OFF'}
          -D UBSAN_UNDEFINED=${UBSAN_UNDEFINED:-'OFF'}
          -D UBSAN_INTEGER=${UBSAN_INTEGER:-'OFF'}
          $GITHUB_WORKSPACE
        # Make sure this runs in bash so the regex matching works
        shell: bash
      - name: Build tests
        if: matrix.use_pch == 'ON'
        working-directory: /work/build
        run: |
          make -j2 RunTests
      # Build the executables in a single thread to reduce memory usage
      # sufficiently so they compile on the GitHub-hosted runners
      - name: Build executables
        working-directory: /work/build
        run: |
          make test-executables
      - name: Build Benchmark executable
        if: matrix.build_type == 'Release'
        working-directory: /work/build
        run: |
          make -j2 Benchmark
      - name: Print size of build directory
        working-directory: /work/build
        run: |
          ls | xargs du -sh
          du -sh .
      - name: Diagnose ccache
        run: |
          ccache -s
      - name: Run unit tests
        if: matrix.use_pch == 'ON'
        working-directory: /work/build
        run: |
          ctest -j2 --output-on-failure
      - name: Run input file tests without PCH
        if: matrix.use_pch == 'OFF'
        working-directory: /work/build
        run: |
          ctest -j2 --output-on-failure -L inputfiles
